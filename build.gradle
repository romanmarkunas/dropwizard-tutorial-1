buildscript {
    repositories {
        maven { url "http://maven-repo2.iggroup.local:8081/nexus/content/groups/public" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

ext {
    vDropwizard = "1.2.2"
}

group 'com.romanmarkunas'
version '1.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url "http://maven-repo2.iggroup.local:8081/nexus/content/groups/public" }
    mavenCentral()
}

dependencies {
    compile "io.dropwizard:dropwizard-core:$vDropwizard"

    testCompile "junit:junit:4.12"
    testCompile "io.dropwizard:dropwizard-testing:$vDropwizard"
}

jar {
    manifest {
        attributes(
                'Main-Class': "com.romanmarkunas.dwtutorial1.HelloApplication"
        )
    }
}


import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

class SFTExt extends ServiceFileTransformer {

    @Override
    void transform(String path, InputStream is, List<Relocator> relocators) {
        def lines = is.readLines();

        relocators.each {rel ->
            if (rel.canRelocateClass(new File(path).name)) {
                path = rel.relocateClass(path)
            }
            lines.eachWithIndex { String line, int i ->
                if (rel.canRelocateClass(line)) {
                    lines[i] = rel.relocateClass(line)
                }
            }
        }

        lines.each {line -> serviceEntries[path]
                .append(new ByteArrayInputStream((line + "\r\n").getBytes()))
        }
    }
}

shadowJar {
//    mergeServiceFiles()
    transform(SFTExt.class)
}
